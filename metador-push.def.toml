# Default configuration file for Metador Push.
#
# You can and should override some of those values in your own config.
# All entries that are missing in your config will take the following default values.
#
# For readability, you can remove everything that you do not need to change.
#
# NOTE: relative file/directory paths will be interpreted relative to CWD,
# NOT relative to location of this config.
#
# A minimal deployment configuration with ORCID and behind a reverse proxy will need:
# metador-push.site, metador-push.tusd_endpoint,
# orcid.enabled, orcid.client_id, orcid.client_secret
# For a possible setup, check out the example nginx configuration file.
##########################################################################################

[metador-push]
# Site where metador-push is served (without trailing slash).
# It depends on the way you proxy/route/serve requests to it.
#
# With reverse proxy for https, this can be e.g. https://your-domain.com
site = 'http://localhost:8000'

# The endpoint URL for file uploads that is accessible from client (with trailing slash).
# It depends on the -base-path of tusd and the way you proxy/route/serve requests to it.
#
# With reverse proxy for https, this can be e.g. https://your-domain.com/tusd/files/
tusd_endpoint = 'http://localhost:1080/files/'
# if tusd is run in the same directory as metador-push , it will create a 'data' directory
# if your tusd runs somewhere else, adapt this in your configuration
tusd_datadir = 'data'

# After that many hours the non-completed datasets have expired and can be cleaned up.
incomplete_expire_after = 48

# Directory where JSON Schemas and Dataset Profiles are stored.
# Make sure that all profile files end with .profile.json
# to ensure that they are identified and loaded correctly.
#
# NOTE: that filenames referencing JSON schemas are relative to profile location.
# NOTE: Only JSON Schema Draft 7 is supported (newest supported by jsonschema library).
# NOTE: Profiles+schemas are copied into datasets and not updated in existing datasets!
profile_dir = 'profiles'

# Location to store all application data and state.
# It will have subdirs "staging" and "complete" for datasets
# and also contain some temporary files.
data_dir = 'metador-push_data'
# Checksum algorithm to use (sha256 and sha512 are supported).
checksum = 'sha256'

# Specify the desired postprocessing.
#
# If a HTTP(S) URL is provided, a POST request will be sent with
# a JSON body containing {"event": "new_dataset", "location": DATASET_PATH}
# where DATASET_PATH is the directory of the new dataset.
#
# If it is not an URL, it is interpreted as a shell command or script that is run when a
# dataset is complete with DATASET_PATH as extra positional argument.
# Your script must be executable and on your PATH for this to work.
#
# In any case, your post-processing is responsible for (re)moving the passed-in directory.
# completion_hook = 'your_script.py'

[metador-push.log]
# Granularity of logging.
level = 'INFO'
# Filename where logs go. if not set, only console log is used.
# file = 'metador-push.log'

################

[orcid]
# Enable ORCID support (without it there is no authentication performed!)
enabled = false
# After that many minutes the user sessions expire and they have to sign in again.
auth_expire_after = 180

# If provided, the following file must exist + contain the ORCIDs of permitted users.
# If the file itself is empty, then _no one_ can use the instance.
# allowlist_file = 'allowlist.txt'

# You need to get API credentials for your Metador Push instance in your ORCID account. See:
# https://info.orcid.org/documentation/api-tutorials/api-tutorial-get-and-authenticated-orcid-id/#Get_some_client_credentials
client_id = ''
client_secret = ''

# If true, uses the sandbox servers provided by ORCID (only useful for developers).
sandbox = false
# If true, uses mock of ORCID (works even offline) (only useful for developers).
use_fake = false

################

[uvicorn]
# The host and port used by uvicorn for binding.
# These are only respected if you launch your application using `metador-push run`.
host = '0.0.0.0'
port = 8000
# If a filename for a UNIX socket is provided, uvicorn will bind to it instead of host:port
# This should be used for proper deployment behind a reverse proxy.
# NOTE: Set socket to /tmp/uvicorn.sock in your config for use with the docker image!
socket = ""

# Mostly for developers: reload application on code changes.
reload = false
